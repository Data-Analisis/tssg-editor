{"version":3,"sources":["serviceWorker.ts","HowToGuideModal.tsx","components/Header.tsx","components/TssgEditor.tsx","App.tsx","index.tsx","../../../src/parsers/ssg.ts"],"names":["Boolean","window","location","hostname","match","HowToGuideModal","props","isOpen","onClose","useState","data","setData","useEffect","fetch","then","resp","text","Modal","size","Heading","backgroundColor","display","p","px","color","Box","className","source","Header","pl","Flex","alignItems","Badge","mx","Text","TssgEditor","setParsedData","wWidth","width","wHeight","height","value","setValue","parsedError","setParsedError","parseAndSetValue","useCallback","debounce","parsed","ssgToOASParser","e","message","trailing","position","error","left","bottom","zIndex","editorDidMount","codeMirror","setSize","options","lineWrapping","lineNumbers","theme","smartIndent","autoCloseBrackets","highlightSelectionMatches","matchBrackets","mode","onBeforeChange","editor","onChange","ErrorBar","rest","console","log","padding","bg","App","parsedData","jsonCopied","setJsonCopied","innerHeight","innerWidth","useDisclosure","onOpen","h","Button","top","right","onClick","Icon","name","mr","flex","JSON","stringify","onCopy","variantColor","style","overflowY","fontSize","ReactDOM","render","StrictMode","CSSReset","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","properties"],"mappings":"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","file":"static/js/main.4bf34fa4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useEffect, useState } from \"react\";\nimport {\n  Modal,\n  ModalBody,\n  ModalHeader,\n  ModalOverlay,\n  ModalContent,\n  ModalCloseButton,\n  Box,\n  Heading,\n} from \"@chakra-ui/core/dist\";\nimport ReactMarkdown from \"react-markdown\";\n\ntype HowToGuideModalPropTypes = {\n  isOpen: boolean;\n  onClose: any;\n};\n\nexport const HowToGuideModal = (props: HowToGuideModalPropTypes) => {\n  const { isOpen, onClose } = props;\n  const [data, setData] = useState(\"\");\n\n  useEffect(() => {\n    if (typeof fetch !== \"undefined\") {\n      // @todo change url to file on REPO.\n      fetch(\"./how-to-guide.md\")\n        .then((resp: Response) => resp.text())\n        .then((data: any) => setData(data));\n    }\n  }, []);\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClose} size={\"900px\"}>\n      <ModalOverlay />\n      <ModalContent>\n        <ModalHeader>\n          <Heading\n            size={\"lg\"}\n            backgroundColor={\"royalblue\"}\n            display={\"inline-block\"}\n            p={2}\n            px={6}\n            color={\"white\"}\n          >\n            How to use guide...\n          </Heading>\n        </ModalHeader>\n        <ModalCloseButton />\n        <ModalBody>\n          <Box className={\"how-to-guide\"}>\n            <ReactMarkdown source={data} />\n          </Box>\n        </ModalBody>\n      </ModalContent>\n    </Modal>\n  );\n};\n","import { Badge, Box, Text, Flex, Heading } from \"@chakra-ui/core/dist\";\nimport React, { ReactElement } from \"react\";\n\nexport const Header = (): ReactElement => {\n  return (\n    <Box pl={8}>\n      <Flex alignItems={\"center\"}>\n        <Heading color={\"green.500\"}>TSSG</Heading>\n        <Badge color={\"white\"} backgroundColor={\"orange.400\"} mx={2}>\n          Alpha\n        </Badge>\n        <Heading size={\"xs\"} color={\"black.200\"}>\n          The Swagger Schema Grammar\n        </Heading>\n      </Flex>\n      <Text>Write schema in an easy, concise and short way</Text>\n    </Box>\n  );\n};\n","import { Controlled as CodeMirror } from \"react-codemirror2\";\nimport React, { ReactElement, useCallback, useEffect, useState } from \"react\";\nimport { Box } from \"@chakra-ui/core/dist\";\nimport debounce from \"lodash.debounce\";\n\nimport { ssgToOASParser } from \"tssg/dist/parsers/ssg\";\nimport \"codemirror/addon/edit/closebrackets\";\nimport \"codemirror/addon/edit/matchbrackets\";\nimport \"codemirror/addon/search/match-highlighter\";\nimport \"codemirror/addon/mode/simple\";\nimport \"codemirror/mode/javascript/javascript\";\n\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/theme/material.css\";\n\ntype TssgEditorProps = {\n  setParsedData?: any;\n  width: number;\n  height: number;\n};\n\nconst defualtValue = `/**\n* Example TSSG Syntax\n* Data Types:\n* \\tstring | s, number | n, integer | i, boolean | b, [], {}\n* Marker:\n* \\tuse \\`!\\` sign to mark an object property as required\n* Supported functions:\n* \\toneOf, allOf, anyOf\n*\n* For more information read \\`how to use\\` guide.\n* This project is Work In Progress. It will soon support other swagger features.\n*/\n{\n\\tname: s,\n\\tage: !n,\n\\taddress: {\n    \\tcity: string,\n        country: !string\n    },\n    choices: oneOf(s, n, b),\n}`;\n\nexport const TssgEditor = (props: TssgEditorProps): ReactElement => {\n  const { setParsedData, width: wWidth, height: wHeight } = props;\n\n  const [value, setValue] = useState(defualtValue);\n  const [parsedError, setParsedError] = useState(\"\" as any);\n\n  const navHeight = 80;\n\n  const parseAndSetValue = useCallback(\n    debounce(\n      (value: string) => {\n        if (!value) return;\n        try {\n          const parsed = ssgToOASParser(`(${value})`);\n          setParsedData(parsed);\n          setParsedError(\"\");\n        } catch (e) {\n          setParsedError(e.message);\n        }\n      },\n      1000,\n      { trailing: true }\n    ),\n    []\n  );\n\n  useEffect(() => {\n    parseAndSetValue(value);\n  }, [value]);\n\n  return (\n    <Box position={\"relative\"}>\n      {parsedError && (\n        <ErrorBar\n          error={parsedError}\n          {...{\n            position: \"absolute\",\n            left: 0,\n            bottom: 0,\n            zIndex: 999,\n            width: \"100%\",\n            color: \"white\",\n          }}\n        />\n      )}\n      <CodeMirror\n        editorDidMount={(codeMirror) => {\n          codeMirror.setSize(wWidth / 2, wHeight - navHeight);\n          // @ts-ignore\n        }}\n        className={\"tssg-editor\"}\n        value={value}\n        options={{\n          lineWrapping: true,\n          lineNumbers: true,\n          theme: \"material\",\n          smartIndent: false,\n          autoCloseBrackets: true,\n          highlightSelectionMatches: true,\n          matchBrackets: true,\n          mode: \"javascript\",\n        }}\n        onBeforeChange={(editor, data, value) => {\n          setValue(value);\n        }}\n        onChange={(editor, data, value) => {}}\n      />\n    </Box>\n  );\n};\n\ntype ErrorBarProps = {\n  error: string;\n};\n\nconst ErrorBar = (props: ErrorBarProps): ReactElement => {\n  const { error, ...rest } = props;\n  console.log(error);\n  return (\n    <Box padding={2} bg={\"orange.400\"} {...rest}>\n      {error || \"\"}\n    </Box>\n  );\n};\n","import React, { ReactElement, useEffect, useState } from \"react\";\nimport { Grid, Box, Button, Flex } from \"@chakra-ui/core\";\n\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/theme/material.css\";\n\nimport \"./index.css\";\n\nimport { Icon, useDisclosure } from \"@chakra-ui/core/dist\";\n\nimport { HowToGuideModal } from \"./HowToGuideModal\";\nimport { Header } from \"./components/Header\";\nimport { TssgEditor } from \"./components/TssgEditor\";\n\n// @ts-ignore\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\n\nexport const App = (): ReactElement => {\n  const navHeight = 80;\n  const [parsedData, setParsedData] = useState();\n  const [jsonCopied, setJsonCopied] = useState(false);\n\n  useEffect(() => {\n    setJsonCopied(false);\n  }, [parsedData]);\n\n  const wHeight = window?.innerHeight;\n  const wWidth = window?.innerWidth;\n  const { isOpen, onClose, onOpen } = useDisclosure();\n\n  return (\n    <>\n      <Box h={navHeight} position={\"relative\"}>\n        <Header />\n        <Button\n          position={\"absolute\"}\n          top={5}\n          right={4}\n          onClick={onOpen}\n          size={\"md\"}\n        >\n          <Icon name={\"info-outline\"} mr={2} /> How to use?\n        </Button>\n      </Box>\n      <Flex>\n        <Box flex={1}>\n          <TssgEditor\n            setParsedData={setParsedData}\n            width={wWidth}\n            height={wHeight}\n          />\n        </Box>\n        <Box flex={1} bg={\"green.500\"} color={\"white\"} position={\"relative\"}>\n          <Box position={\"absolute\"} top={2} right={6}>\n            <CopyToClipboard\n              text={JSON.stringify(parsedData, null, 2)}\n              onCopy={() => setJsonCopied(true)}\n            >\n              <Button size={\"sm\"} variantColor={\"blue\"}>\n                <Icon name={jsonCopied ? \"check\" : \"copy\"} mr={2} /> Copy to\n                clipboard\n              </Button>\n            </CopyToClipboard>\n          </Box>\n          <pre\n            style={{\n              overflowY: \"scroll\",\n              height: wHeight - navHeight,\n              padding: \"10px\",\n              fontSize: \"16px\",\n            }}\n          >\n            {JSON.stringify(parsedData, null, 2)}\n          </pre>\n        </Box>\n      </Flex>\n\n      <HowToGuideModal isOpen={isOpen} onClose={onClose} />\n    </>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { App } from \"./App\";\nimport { ThemeProvider } from \"emotion-theming\";\nimport { theme, CSSReset } from \"@chakra-ui/core/dist\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <CSSReset />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\"use strict\";\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst esprima = __importStar(require(\"esprima\"));\n/**\n * identifierProcessor is responsible for handling all non-quoted strings, e.g. variables.\n */\nfunction identifierProcessor(cache, identifier, object) {\n    var _a, _b, _c, _d;\n    try {\n        if (object.value.type === esprima.Syntax.ArrayExpression ||\n            (object.value.type === esprima.Syntax.UnaryExpression &&\n                object.value.argument.type === esprima.Syntax.ArrayExpression) ||\n            object.value.type === esprima.Syntax.CallExpression ||\n            (object.value.type === esprima.Syntax.UnaryExpression &&\n                object.value.argument.type === esprima.Syntax.CallExpression)) {\n            return { type: getTypeMapping(identifier.name) };\n        }\n        else {\n            cache.properties[object.key.name] = {\n                type: getTypeMapping((_a = identifier) === null || _a === void 0 ? void 0 : _a.name),\n            };\n        }\n    }\n    catch (error) {\n        throw new Error(`Line ${(_d = (_c = (_b = object) === null || _b === void 0 ? void 0 : _b.loc) === null || _c === void 0 ? void 0 : _c.start) === null || _d === void 0 ? void 0 : _d.line}: ${error.message}`);\n    }\n    return cache;\n}\nconst allowedDataTypes = [\n    //\n    \"s\",\n    \"string\",\n    \"i\",\n    \"integer\",\n    \"n\",\n    \"number\",\n    \"b\",\n    \"boolean\",\n];\nfunction getTypeMapping(shortType) {\n    if (!allowedDataTypes.includes(shortType)) {\n        throw new Error(`ssg error: '${shortType}' is not a valid data type`);\n    }\n    const typeMapping = {\n        s: \"string\",\n        i: \"integer\",\n        n: \"number\",\n        b: \"boolean\",\n    };\n    return typeMapping[shortType] || shortType;\n}\n/**\n * unaryExpressionProcessor is responsible for handling \"!\"\n */\nfunction unaryExpressionProcessor(cache, unary, object) {\n    var _a, _b, _c, _d;\n    if (unary.operator === \"!\") {\n        cache.required = [...(((_a = cache) === null || _a === void 0 ? void 0 : _a.required) || []), object.key.name];\n        if (unary.argument.type === esprima.Syntax.Identifier) {\n            return identifierProcessor(cache, unary.argument, object);\n        }\n        if (unary.argument.type === esprima.Syntax.ObjectExpression) {\n            return objectExpressionProcessor(cache, unary.argument, object);\n        }\n        if (unary.argument.type === esprima.Syntax.ArrayExpression) {\n            return arrayExpressionProcessor(cache, unary.argument, object);\n        }\n        if (unary.argument.type === esprima.Syntax.CallExpression) {\n            return callExpressionProcessor(cache, unary.argument, object);\n        }\n    }\n    throw new Error(`Line ${(_d = (_c = (_b = object) === null || _b === void 0 ? void 0 : _b.loc) === null || _c === void 0 ? void 0 : _c.start) === null || _d === void 0 ? void 0 : _d.line}: Syntax error`);\n}\n/**\n * objectExpressionProcessor is responsible for handling objects.\n */\nfunction objectExpressionProcessor(cache, obj, object) {\n    if (object.value.type === esprima.Syntax.ArrayExpression ||\n        (object.value.type === esprima.Syntax.UnaryExpression &&\n            object.value.argument.type === esprima.Syntax.ArrayExpression) ||\n        object.value.type === esprima.Syntax.CallExpression ||\n        (object.value.type === esprima.Syntax.UnaryExpression &&\n            object.value.argument.type === esprima.Syntax.CallExpression)) {\n        return {\n            type: \"object\",\n            ...obj.properties.reduce(reducer, undefined),\n        };\n    }\n    cache.properties[object.key.name] = {\n        type: \"object\",\n        ...obj.properties.reduce(reducer, undefined),\n    };\n    return cache;\n}\n/**\n * arrayExpressionProcessor is responsible for handling arrays.\n */\nfunction arrayExpressionProcessor(cache, array, object) {\n    cache.properties[object.key.name] = {\n        type: \"array\",\n        items: (() => {\n            const element = array.elements[0];\n            if (!element) {\n                return {};\n            }\n            switch (element.type) {\n                case esprima.Syntax.Identifier:\n                    return identifierProcessor({}, element, object);\n                case esprima.Syntax.ObjectExpression:\n                    return objectExpressionProcessor({}, element, object);\n                case esprima.Syntax.CallExpression:\n                    return callExpressionProcessor(null, element, object);\n            }\n        })(),\n    };\n    return cache;\n}\nconst allowedFunctionalKeywords = [\n    //\n    \"oneOf\",\n    \"allOf\",\n    \"anyOf\",\n];\n/**\n * callExpressionProcessor is responsible for handling function calls. e.g. oneOf(string, number)\n */\nfunction callExpressionProcessor(cache, call, object) {\n    var _a, _b, _c;\n    if (!allowedFunctionalKeywords.includes(call.callee.name)) {\n        throw new Error(`Line ${(_c = (_b = (_a = object) === null || _a === void 0 ? void 0 : _a.loc) === null || _b === void 0 ? void 0 : _b.start) === null || _c === void 0 ? void 0 : _c.line}: '${call.callee.name}' is an invalid keyword`);\n    }\n    /**\n     * oneOf, allOf and anyOf keywords share same schema structure, so can be used together here.\n     */\n    if (allowedFunctionalKeywords.includes(call.callee.name)) {\n        /**\n         * 1. When array items are being reduced, cache is not passed to generate new object.\n         * 2. When the callExpression is inside an arrayExpression, we need to return new object.\n         * 3. When there's a unaryExpression followed by arrayExpression and inside arrayExpression there's a callExpression, we need to return new object.\n         */\n        if (!cache && //\n            (object.value.type === esprima.Syntax.ArrayExpression ||\n                (object.value.type === esprima.Syntax.UnaryExpression &&\n                    object.value.argument.type === esprima.Syntax.ArrayExpression))) {\n            return {\n                [call.callee.name]: call.arguments.map((argument) => {\n                    if (argument.type === esprima.Syntax.Identifier) {\n                        return identifierProcessor({}, argument, object);\n                    }\n                    if (argument.type === esprima.Syntax.ObjectExpression) {\n                        return objectExpressionProcessor({}, argument, object);\n                    }\n                }),\n            };\n        }\n        /**\n         * If the callExpression is outside the arrayExpression, cache will be passed. So we need to update that and return back.\n         */\n        cache.properties[object.key.name] = {\n            [call.callee.name]: call.arguments.map((argument) => {\n                if (argument.type === esprima.Syntax.Identifier) {\n                    return identifierProcessor({}, argument, object);\n                }\n                if (argument.type === esprima.Syntax.ObjectExpression) {\n                    return objectExpressionProcessor({}, argument, object);\n                }\n            }),\n        };\n    }\n    return cache;\n}\nfunction filterCache(cache) {\n    var _a;\n    if (typeof cache.required !== \"undefined\" && !((_a = cache.required) === null || _a === void 0 ? void 0 : _a.length)) {\n        delete cache.required;\n    }\n    return cache;\n}\n/**\n * reducer is responsible for reducing the AST into Schema Object.\n */\nconst reducer = (cache = {\n    type: \"object\",\n    required: [],\n    properties: {},\n}, obj) => {\n    // if (obj.key.name === \"$meta\") {\n    // \treturn {\n    // \t\t...obj.value.properties.reduce((meta, prop) => {\n    // \t\t\tmeta[prop.key.name] = prop.value.value;\n    // \t\t\treturn meta;\n    // \t\t}, {}),\n    // \t\t...cache,\n    // \t};\n    // }\n    if (obj.value.type === esprima.Syntax.Identifier) {\n        return filterCache(identifierProcessor(cache, obj.value, obj));\n    }\n    if (obj.value.type === esprima.Syntax.UnaryExpression) {\n        return filterCache(unaryExpressionProcessor(cache, obj.value, obj));\n    }\n    if (obj.value.type === esprima.Syntax.ObjectExpression) {\n        return filterCache(objectExpressionProcessor(cache, obj.value, obj));\n    }\n    if (obj.value.type === esprima.Syntax.ArrayExpression) {\n        return arrayExpressionProcessor(cache, obj.value, obj);\n    }\n    if (obj.value.type === esprima.Syntax.CallExpression) {\n        return filterCache(callExpressionProcessor(cache, obj.value, obj));\n    }\n};\nfunction ssgToOASParser(str) {\n    const parsedScript = esprima.parseScript(`(${str})`, { loc: true });\n    const allObjectProperties = parsedScript.body[0].expression.properties;\n    return allObjectProperties.reduce(reducer, undefined);\n}\nexports.ssgToOASParser = ssgToOASParser;\n//# sourceMappingURL=ssg.js.map"],"sourceRoot":""}